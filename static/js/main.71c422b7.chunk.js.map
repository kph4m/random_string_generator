{"version":3,"sources":["App.js","characters.js","reportWebVitals.js","index.js"],"names":["App","useState","String","setString","StringLength","setStringLength","includeUppercase","setUppercase","includeLowercase","setLowercase","includeNumbers","setNumbers","includeSymbol","setSymbol","createString","characterList","characterListLength","length","i","characterIndex","Math","round","random","charAt","errorGenerate","toast","className","position","reverseOrder","onClick","error","textArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","clipboard","for","defaultValue","onChange","e","target","value","type","id","name","min","max","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.71c422b7.chunk.js","sourcesContent":["import './App.css'\r\nimport React, { useState } from 'react'\r\nimport { FaClipboard, FaCopy } from 'react-icons/fa'\r\nimport {\r\n  numbers,\r\n  upperCaseLetters,\r\n  lowerCaseLetters,\r\n  specialCharacters\r\n} from './characters.js'\r\nimport toast, { Toaster } from 'react-hot-toast'\r\n\r\nfunction App () {\r\n  const [String, setString] = useState('')\r\n  const [StringLength, setStringLength] = useState(4)\r\n  const [includeUppercase, setUppercase] = useState(false)\r\n  const [includeLowercase, setLowercase] = useState(false)\r\n  const [includeNumbers, setNumbers] = useState(false)\r\n  const [includeSymbol, setSymbol] = useState(false)\r\n\r\n  // Updates String\r\n  const handleString = () => {\r\n    if (\r\n      !includeLowercase &&\r\n      !includeUppercase &&\r\n      !includeNumbers &&\r\n      !includeSymbol\r\n    ) {\r\n      errorGenerate()\r\n    } else {\r\n      let characterList = ''\r\n\r\n      if (includeUppercase) {\r\n        characterList += upperCaseLetters\r\n      }\r\n\r\n      if (includeLowercase) {\r\n        characterList += lowerCaseLetters\r\n      }\r\n\r\n      if (includeNumbers) {\r\n        characterList += numbers\r\n      }\r\n\r\n      if (includeSymbol) {\r\n        characterList += specialCharacters\r\n      }\r\n\r\n      setString(createString(characterList))\r\n    }\r\n  }\r\n\r\n  // Creates String\r\n  const createString = characterList => {\r\n    let String = ''\r\n    const characterListLength = characterList.length\r\n\r\n    for (let i = 0; i < StringLength; i++) {\r\n      const characterIndex = Math.round(Math.random() * characterListLength)\r\n      String = String + characterList.charAt(characterIndex)\r\n    }\r\n    return String\r\n  }\r\n\r\n  // Copies to Clipboard\r\n  const clipboard = () => {\r\n    const textArea = document.createElement('textarea')\r\n\r\n    textArea.innerText = String\r\n\r\n    document.body.appendChild(textArea)\r\n\r\n    textArea.select()\r\n\r\n    document.execCommand('copy')\r\n\r\n    textArea.remove()\r\n  }\r\n\r\n  // Notifies if String has been copied to clipboard\r\n  const notify = () => toast('Copied to clipboard.')\r\n\r\n  // Displays message if no String has been generated\r\n  const errorCopy = () => toast.error('No String has been generated.')\r\n\r\n  // Displays message if not boxes have been checked\r\n  const errorGenerate = () => toast('Please check at least one box.')\r\n\r\n  //\r\n  const handleCopy = () => {\r\n    if (String === '') {\r\n      errorCopy()\r\n    } else {\r\n      notify()\r\n      clipboard()\r\n    }\r\n  }\r\n  return (\r\n    <div className='App'>\r\n      <Toaster position='top-center' reverseOrder={false} />\r\n      <div className='container'>\r\n        <h2 className='header'>String Generator</h2>\r\n\r\n        {/* Displays String and clipboard */}\r\n        <div className='generator'>\r\n          <h3>{String}</h3>\r\n          <button onClick={handleCopy} className='cpy-btn'>\r\n            <FaClipboard />\r\n          </button>\r\n        </div>\r\n\r\n        {/* String Length */}\r\n        <div className='sub'>\r\n          <label for='String-length'>String Length</label>\r\n          <input\r\n            defaultValue='StringLength'\r\n            onChange={e => {\r\n              setStringLength(e.target.value)\r\n            }}\r\n            type='number'\r\n            id='String-length'\r\n            name='String-length'\r\n            min='4'\r\n            max='20'\r\n          />\r\n        </div>\r\n\r\n        {/* Uppercase Letters */}\r\n        <div className='sub'>\r\n          <label for='uppercase-letters'>Include Uppercase Letters</label>\r\n          <input\r\n            checked={includeUppercase}\r\n            onChange={e => setUppercase(e.target.checked)}\r\n            type='checkbox'\r\n            id='uppercase-letters'\r\n            name='uppercase-letters'\r\n            value='uppercaseLetters'\r\n          />\r\n        </div>\r\n\r\n        {/* Lowercase Letters */}\r\n        <div className='sub'>\r\n          <label for='lowercase-letters'>Include Lowercase Letters</label>\r\n          <input\r\n            checked={includeLowercase}\r\n            onChange={e => setLowercase(e.target.checked)}\r\n            type='checkbox'\r\n            id='lowercase-letters'\r\n            name='lowercase-letters'\r\n            value='lowercaseLetters'\r\n          />\r\n        </div>\r\n\r\n        {/* Numbers */}\r\n        <div className='sub'>\r\n          <label for='numbers'>Include Numbers</label>\r\n          <input\r\n            checked={includeNumbers}\r\n            onChange={e => setNumbers(e.target.checked)}\r\n            type='checkbox'\r\n            id='numbers'\r\n            name='numbers'\r\n            value='number'\r\n          />\r\n        </div>\r\n\r\n        {/*Symbols*/}\r\n        <div className='sub'>\r\n          <label for='symbols'>Include Symbols</label>\r\n          <input\r\n            checked={includeSymbol}\r\n            onChange={e => setSymbol(e.target.checked)}\r\n            type='checkbox'\r\n            id='symbols'\r\n            name='symbols'\r\n            value='symbol'\r\n          />\r\n        </div>\r\n\r\n        {/*Generate String*/}\r\n        <button onClick={handleString} className='generate-btn'>\r\n          <p>Generate String</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const numbers = '0123456789'\r\nexport const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nexport const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\r\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}